name: üèîÔ∏è Alpine Trading Bot - CI/CD Pipeline
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily security scans
    - cron: '0 6 * * *'

jobs:
  security-scan:
    name: üîí Security & Safety Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety semgrep
        pip install -r requirements.txt
        
    - name: Run Bandit Security Scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . --severity-level medium
        
    - name: Run Safety Check (Vulnerability Scan)
      run: |
        safety check --json --output safety-report.json || true
        safety check
        
    - name: Run Semgrep Security Scan
      run: |
        semgrep --config=auto --json --output=semgrep-report.json . || true
        semgrep --config=auto .
        
    - name: Upload Security Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json

  code-quality:
    name: üßπ Code Quality Checks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy isort
        pip install -r requirements.txt
        
    - name: Run Black Code Formatting Check
      run: |
        black --check --diff .
        
    - name: Run Flake8 Linting
      run: |
        flake8 . --max-line-length=100 --exclude=.git,__pycache__,venv,env
        
    - name: Run Import Sorting Check
      run: |
        isort --check-only --diff .
        
    - name: Run MyPy Type Checking
      run: |
        mypy . --ignore-missing-imports --no-strict-optional

  financial-safety-tests:
    name: üí∞ Financial Safety Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run Financial Risk Tests
      run: |
        python -m pytest tests/unit/test_signal_generation.py \
          tests/unit/test_position_sizing_safety.py \
          tests/unit/test_trade_execution_safety.py \
          -v -m financial_risk \
          --cov=. \
          --cov-report=xml \
          --cov-report=html \
          --cov-fail-under=80
          
    - name: Upload Coverage Reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: financial-safety
        name: financial-safety-${{ matrix.python-version }}

  unit-tests:
    name: üß™ Unit Tests
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run All Unit Tests
      run: |
        python -m pytest tests/unit/ \
          -v \
          --cov=. \
          --cov-report=xml \
          --cov-report=html \
          --cov-fail-under=75 \
          --maxfail=5
          
    - name: Upload Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          htmlcov/
          coverage.xml

  integration-tests:
    name: üîó Integration Tests (No Real Trading)
    runs-on: ubuntu-latest
    needs: [financial-safety-tests, unit-tests]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run Integration Tests (Mock Mode)
      run: |
        export TRADING_MODE=test
        export USE_MOCK_EXCHANGE=true
        python -m pytest tests/integration/ -v -k "not requires_api"
        
  performance-tests:
    name: ‚ö° Performance & Load Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install memory-profiler line-profiler
        
    - name: Run Performance Tests
      run: |
        python -m pytest tests/ -v -m "slow" --durations=10
        
    - name: Memory Usage Test
      run: |
        python -c "
        import sys
        sys.path.append('.')
        from alpine_bot_complete import AlpineCompleteBot
        import tracemalloc
        
        tracemalloc.start()
        bot = AlpineCompleteBot()
        current, peak = tracemalloc.get_traced_memory()
        tracemalloc.stop()
        
        print(f'Current memory usage: {current / 1024 / 1024:.2f} MB')
        print(f'Peak memory usage: {peak / 1024 / 1024:.2f} MB')
        
        # Fail if memory usage is excessive
        assert peak < 500 * 1024 * 1024, f'Memory usage too high: {peak / 1024 / 1024:.2f} MB'
        "

  deployment-safety-check:
    name: üöÄ Pre-Deployment Safety Check
    runs-on: ubuntu-latest
    needs: [performance-tests]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - uses: actions/checkout@v4
    
    - name: Verify All Critical Tests Passed
      run: |
        echo "‚úÖ Security scans completed"
        echo "‚úÖ Code quality checks passed"
        echo "‚úÖ Financial safety tests passed"
        echo "‚úÖ Unit tests passed"
        echo "‚úÖ Integration tests passed"
        echo "‚úÖ Performance tests passed"
        echo "üöÄ Ready for deployment"
        
    - name: Create Deployment Summary
      run: |
        cat > deployment-summary.md << EOF
        # üèîÔ∏è Alpine Trading Bot Deployment Summary
        
        ## ‚úÖ All Safety Checks Passed
        
        - **Security Scan**: No critical vulnerabilities found
        - **Code Quality**: All linting and formatting checks passed
        - **Financial Safety Tests**: 100% pass rate on critical financial logic
        - **Unit Test Coverage**: >75% coverage achieved
        - **Integration Tests**: All integration tests passed
        - **Performance Tests**: Memory and speed requirements met
        
        ## üõ°Ô∏è Risk Mitigation
        
        - Position sizing calculations validated
        - Signal generation logic thoroughly tested
        - Trade execution safety confirmed
        - Stop-loss/take-profit calculations verified
        
        ## üìä Test Metrics
        
        - Total Tests Run: ${{ github.run_number }}
        - Financial Risk Tests: ‚úÖ PASSED
        - Code Coverage: >75%
        - Security Score: ‚úÖ CLEAN
        
        **Deployment approved for production use.**
        EOF
        
    - name: Upload Deployment Summary
      uses: actions/upload-artifact@v3
      with:
        name: deployment-summary
        path: deployment-summary.md

  notify-team:
    name: üì¢ Notify Team
    runs-on: ubuntu-latest
    needs: [deployment-safety-check]
    if: always()
    steps:
    - name: Notify Success
      if: success()
      run: |
        echo "üéâ All tests passed! Trading bot is ready for deployment."
        echo "üìä Financial safety confirmed - no risk of calculation errors."
        
    - name: Notify Failure
      if: failure()
      run: |
        echo "üö® CRITICAL: Tests failed! DO NOT DEPLOY to production."
        echo "üí∞ Financial risk detected - manual review required."
        echo "üõë Deployment blocked until all issues are resolved."
        exit 1