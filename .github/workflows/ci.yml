name: Alpine Trading Bot CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        # Install flake8
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Format with black
      run: |
        pip install black
        black --check --diff .
    
    - name: Test with pytest
      run: |
        python -m pytest tests/ -v --tb=short
    
    - name: Test bot connectivity (if secrets available)
      if: ${{ secrets.BITGET_API_KEY != '' }}
      env:
        BITGET_API_KEY: ${{ secrets.BITGET_API_KEY }}
        BITGET_API_SECRET: ${{ secrets.BITGET_API_SECRET }}
        BITGET_PASSPHRASE: ${{ secrets.BITGET_PASSPHRASE }}
      run: |
        python main.py --test

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Run security checks
      run: |
        pip install bandit safety
        bandit -r alpine_bot/
        safety check --file requirements.txt

  docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: 3.9
    
    - name: Install docs dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install sphinx sphinx-rtd-theme
    
    - name: Generate documentation
      run: |
        # This would generate documentation
        echo "Documentation generation placeholder"

  docker:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Build Docker image
      run: |
        # This would build a Docker image
        echo "Docker build placeholder"